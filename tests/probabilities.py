import unittest as ut

from minegauler.utils import get_nbrs
from minegauler.solver import find_numbers, find_groups
from minegauler.solver.deducer import SolverReducedBoard
from minegauler.solver.probabilities import ProbsGrid


boards = []
boards.append({
    'board': [
        ['U', 'U', 'U', 'U', 'U'],
        ['U', 'U',  1,   2,   1 ],
        ['U', 'U', 'U', 'U', 'U']
        ],
    'per_cell': 1,
    'mines': 3,
    'numbers': [
        {'index': 0, 'num': 1, 'val': 1, 'coord': (2, 1),
         'nbrs': [(1, 0), (1, 1), (1, 2), (2, 0), (2, 2), (3, 0), (3, 2)]},
        {'index': 1, 'num': 2, 'val': 2, 'coord': (3, 1),
         'nbrs': [(2, 0), (2, 2), (3, 0), (3, 2), (4, 0), (4, 2)]},
        {'index': 2, 'num': 1, 'val': 1, 'coord': (4, 1),
         'nbrs': [(3, 0), (3, 2), (4, 0), (4, 2)]}
        ],
    'groups': [
        {'index': 0, 'coords': [(1, 0), (1, 1), (1, 2)], 'nrs': [0]},
        {'index': 1, 'coords': [(2, 0), (2, 2)], 'nrs': [0, 1]},
        {'index': 2, 'coords': [(3, 0), (3, 2)], 'nrs': [0, 1, 2]},
        {'index': 3, 'coords': [(4, 0), (4, 2)], 'nrs': [1, 2]}
        ],
    'configs': [(1, 1)],
    'probs': [
        [33.3,  0,  50.0,  0,  50.0],
        [33.3,  0,   0  ,  0,   0  ],
        [33.3,  0,  50.0,  0,  50.0]
    })
boards.append({
    'board': [
        ['U', 'U', 'U', 'U', 'U',  2,   2,  'U'],
        [ 1,   2,  'U', 'U', 'U', 'U', 'U', 'U'],
        ['U', 'U', 'U', 'U', 'U', 'U', 'U', 'U'],
        ['U', 'U',  2,   1,   1,   2,  'U', 'U'],
        [ 1,   1,   1,   0,   0,   1,  'U', 'U'],
        [ 0,   0,   0,   0,   0,   1,  'U', 'U'],
        [ 0,   0,   0,   0,   0,   1,   1,   1 ]
        ],
    'per_cell': 1,
    'mines': 11,
    'numbers': [
        {'index': 0, 'num': 1, 'val': 1, 'coord': (0, 1), 'nbrs': [(0, 0), (0, 2), (1, 0), (1, 2)]},
        {'index': 1, 'num': 1, 'val': 1, 'coord': (0, 4), 'nbrs': [(0, 3), (1, 3)]},
        {'index': 2, 'num': 2, 'val': 2, 'coord': (1, 1), 'nbrs': [(0, 0), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)]},
        {'index': 3, 'num': 1, 'val': 1, 'coord': (1, 4), 'nbrs': [(0, 3), (1, 3)]},
        {'index': 4, 'num': 2, 'val': 2, 'coord': (2, 3), 'nbrs': [(1, 2), (1, 3), (2, 2), (3, 2)]},
        {'index': 5, 'num': 1, 'val': 1, 'coord': (2, 4), 'nbrs': [(1, 3)]},
        {'index': 6, 'num': 1, 'val': 1, 'coord': (3, 3), 'nbrs': [(2, 2), (3, 2), (4, 2)]},
        {'index': 7, 'num': 1, 'val': 1, 'coord': (4, 3), 'nbrs': [(3, 2), (4, 2), (5, 2)]},
        {'index': 8, 'num': 2, 'val': 2, 'coord': (5, 0), 'nbrs': [(4, 0), (4, 1), (5, 1), (6, 1)]},
        {'index': 9, 'num': 2, 'val': 2, 'coord': (5, 3), 'nbrs': [(4, 2), (5, 2), (6, 2), (6, 3), (6, 4)]},
        {'index': 10, 'num': 1, 'val': 1, 'coord': (5, 4), 'nbrs': [(6, 3), (6, 4), (6, 5)]},
        {'index': 11, 'num': 1, 'val': 1, 'coord': (5, 5), 'nbrs': [(6, 4), (6, 5)]},
        {'index': 12, 'num': 1, 'val': 1, 'coord': (5, 6), 'nbrs': [(6, 5)]},
        {'index': 13, 'num': 2, 'val': 2, 'coord': (6, 0), 'nbrs': [(5, 1), (6, 1), (7, 0), (7, 1)]},
        {'index': 14, 'num': 1, 'val': 1, 'coord': (6, 6), 'nbrs': [(6, 5), (7, 5)]},
        {'index': 15, 'num': 1, 'val': 1, 'coord': (7, 6), 'nbrs': [(6, 5), (7, 5)]}
        ],
    'groups': [
        {'index': 0, 'coords': [(0, 0), (0, 2), (1, 0)], 'nrs': [0, 2]},
        {'index': 1, 'coords': [(1, 2)], 'nrs': [0, 2, 4]},
        {'index': 2, 'coords': [(0, 3)], 'nrs': [1, 3]},
        {'index': 3, 'coords': [(1, 3)], 'nrs': [1, 3, 4, 5]},
        {'index': 4, 'coords': [(2, 0), (2, 1)], 'nrs': [2]},
        {'index': 5, 'coords': [(2, 2)], 'nrs': [2, 4, 6]},
        {'index': 6, 'coords': [(3, 2)], 'nrs': [4, 6, 7]},
        {'index': 7, 'coords': [(4, 2)], 'nrs': [6, 7, 9]},
        {'index': 8, 'coords': [(5, 2)], 'nrs': [7, 9]},
        {'index': 9, 'coords': [(4, 0), (4, 1)], 'nrs': [8]},
        {'index': 10, 'coords': [(5, 1), (6, 1)], 'nrs': [8, 13]},
        {'index': 11, 'coords': [(6, 2)], 'nrs': [9]},
        {'index': 12, 'coords': [(6, 3)], 'nrs': [9, 10]},
        {'index': 13, 'coords': [(6, 4)], 'nrs': [9, 10, 11]},
        {'index': 14, 'coords': [(6, 5)], 'nrs': [10, 11, 12, 14, 15]},
        {'index': 15, 'coords': [(7, 0), (7, 1)], 'nrs': [13]},
        {'index': 16, 'coords': [(7, 5)], 'nrs': [14, 15]}
        ],
    'configs': [
        [(0, 1, 1, 0, 0, 1, 0, 1), (1, 0, 0, 1, 0, 0, 1, 1)],
        [(0, 2, 0), (1, 1, 1), (2, 0, 2)],
        [(1, 1)]
        ],
    'probs': [
        [20.0, 20.0, 20.0, 60.0, 47.4,  0  ,  0  , 47.4],
        [ 0  ,  0  , 20.0, 60.0, 47.4, 52.6, 52.6, 47.4],
        [20.0, 40.0, 60.0,  0  , 40.0, 60.0, 100 , 60.0],
        [ 0  , 100 ,  0  ,  0  ,  0  ,  0  ,  0  , 60.0],
        [ 0  ,  0  ,  0  ,  0  ,  0  ,  0  ,  0  , 60.0],
        [ 0  ,  0  ,  0  ,  0  ,  0  ,  0  , 100 ,  0  ],
        [ 0  ,  0  ,  0  ,  0  ,  0  ,  0  ,  0  ,  0  ]
        ]
    })
boards.append({
    'board': [
        ['U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U'],
        ['U', 'U',  2,   2,   1,   1,   2, 'F1',  3,  'U'],
        ['U',  2,  'U',  1,   0,   0,   1,   3, 'F1', 'U'],
        ['U', 'U',  2,   1,   0,   1,   1,   4, 'F1', 'U'],
        ['U', 'U',  2,   0,   1,   2, 'F1',  4, 'F1', 'U'],
        ['U', 'U',  2,   1,   2,  'U',  3,  'U', 'U', 'U'],
        ['U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U'],
        ],
    'per_cell': 3,
    'mines': 20,
    'numbers': [
        {'index': 0, 'num': 2, 'val': 2, 'coord': (1, 2), 'nbrs': [(0, 1), (0, 2), (0, 3), (1, 1), (1, 3), (2, 2)]},
        {'index': 1, 'num': 2, 'val': 2, 'coord': (2, 1), 'nbrs': [(1, 0), (1, 1), (2, 0), (2, 2), (3, 0)]},
        {'index': 2, 'num': 2, 'val': 2, 'coord': (2, 3), 'nbrs': [(1, 3), (1, 4), (2, 2)]},
        {'index': 3, 'num': 2, 'val': 2, 'coord': (2, 4), 'nbrs': [(1, 3), (1, 4), (1, 5)]},
        {'index': 4, 'num': 2, 'val': 2, 'coord': (2, 5), 'nbrs': [(1, 4), (1, 5), (1, 6), (2, 6), (3, 6)]},
        {'index': 5, 'num': 2, 'val': 2, 'coord': (3, 1), 'nbrs': [(2, 0), (2, 2), (3, 0), (4, 0)]},
        {'index': 6, 'num': 1, 'val': 1, 'coord': (3, 2), 'nbrs': [(2, 2)]},
        {'index': 7, 'num': 1, 'val': 1, 'coord': (3, 3), 'nbrs': [(2, 2)]},
        {'index': 8, 'num': 1, 'val': 1, 'coord': (3, 5), 'nbrs': [(2, 6), (3, 6), (4, 6)]},
        {'index': 9, 'num': 1, 'val': 1, 'coord': (4, 1), 'nbrs': [(3, 0), (4, 0), (5, 0)]},
        {'index': 10, 'num': 1, 'val': 1, 'coord': (4, 4), 'nbrs': [(5, 5)]},
        {'index': 11, 'num': 2, 'val': 2, 'coord': (4, 5), 'nbrs': [(3, 6), (4, 6), (5, 5), (5, 6)]},
        {'index': 12, 'num': 1, 'val': 1, 'coord': (5, 1), 'nbrs': [(4, 0), (5, 0), (6, 0)]},
        {'index': 13, 'num': 1, 'val': 1, 'coord': (5, 3), 'nbrs': [(6, 4)]},
        {'index': 14, 'num': 2, 'val': 2, 'coord': (5, 4), 'nbrs': [(5, 5), (6, 4)]},
        {'index': 15, 'num': 2, 'val': 2, 'coord': (6, 1), 'nbrs': [(5, 0), (6, 0), (7, 0), (7, 1)]},
        {'index': 16, 'num': 1, 'val': 1, 'coord': (6, 2), 'nbrs': [(7, 1)]},
        {'index': 17, 'num': 1, 'val': 1, 'coord': (6, 3), 'nbrs': [(6, 4)]},
        {'index': 18, 'num': 3, 'val': 3, 'coord': (6, 5), 'nbrs': [(5, 5), (5, 6), (6, 4), (6, 6), (7, 5), (7, 6)]},
        {'index': 19, 'num': 3, 'val': 3, 'coord': (7, 2), 'nbrs': [(7, 1), (8, 2), (8, 3)]},
        {'index': 20, 'num': 4, 'val': 4, 'coord': (7, 3), 'nbrs': [(6, 4), (8, 2), (8, 3), (8, 4)]},
        {'index': 21, 'num': 4, 'val': 4, 'coord': (7, 4), 'nbrs': [(6, 4), (7, 5), (8, 3), (8, 4), (8, 5)]},
        {'index': 22, 'num': 3, 'val': 3, 'coord': (8, 1), 'nbrs': [(7, 0), (7, 1), (8, 0), (8, 2), (9, 0), (9, 1), (9, 2)]}
        ],
    'groups': [
        {'index': 0, 'coords': [(0, 1), (0, 2), (0, 3)], 'nrs': [0]},
        {'index': 1, 'coords': [(1, 1)], 'nrs': [0, 1]},
        {'index': 2, 'coords': [(1, 3)], 'nrs': [0, 2, 3]},
        {'index': 3, 'coords': [(2, 2)], 'nrs': [0, 1, 2, 5, 6, 7]},
        {'index': 4, 'coords': [(1, 0)], 'nrs': [1]},
        {'index': 5, 'coords': [(2, 0)], 'nrs': [1, 5]},
        {'index': 6, 'coords': [(3, 0)], 'nrs': [1, 5, 9]},
        {'index': 7, 'coords': [(1, 4)], 'nrs': [2, 3, 4]},
        {'index': 8, 'coords': [(1, 5)], 'nrs': [3, 4]},
        {'index': 9, 'coords': [(1, 6)], 'nrs': [4]},
        {'index': 10, 'coords': [(2, 6)], 'nrs': [4, 8]},
        {'index': 11, 'coords': [(3, 6)], 'nrs': [4, 8, 11]},
        {'index': 12, 'coords': [(4, 0)], 'nrs': [5, 9, 12]},
        {'index': 13, 'coords': [(4, 6)], 'nrs': [8, 11]},
        {'index': 14, 'coords': [(5, 0)], 'nrs': [9, 12, 15]},
        {'index': 15, 'coords': [(5, 5)], 'nrs': [10, 11, 14, 18]},
        {'index': 16, 'coords': [(5, 6)], 'nrs': [11, 18]},
        {'index': 17, 'coords': [(6, 0)], 'nrs': [12, 15]},
        {'index': 18, 'coords': [(6, 4)], 'nrs': [13, 14, 17, 18, 20, 21]},
        {'index': 19, 'coords': [(7, 0)], 'nrs': [15, 22]},
        {'index': 20, 'coords': [(7, 1)], 'nrs': [15, 16, 19, 22]},
        {'index': 21, 'coords': [(6, 6), (7, 6)], 'nrs': [18]},
        {'index': 22, 'coords': [(7, 5)], 'nrs': [18, 21]},
        {'index': 23, 'coords': [(8, 2)], 'nrs': [19, 20, 22]},
        {'index': 24, 'coords': [(8, 3)], 'nrs': [19, 20, 21]},
        {'index': 25, 'coords': [(8, 4)], 'nrs': [20, 21]},
        {'index': 26, 'coords': [(8, 5)], 'nrs': [21]},
        {'index': 27, 'coords': [(8, 0), (9, 0), (9, 1), (9, 2)], 'nrs': [22]}
        ],
    'configs': [[
        (0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
        (0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 2, 0, 1, 0),
        (0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 2),
        (0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),
        (0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0),
        (0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 2),
        (0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1),
        (0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 2, 0),
        (0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
        (0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 1, 0),
        (0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 2, 0, 2),
        (0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),
        (0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0),
        (0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
        (0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 1, 0),
        (0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 2),
        (0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
        (0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0),
        (0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 2, 0, 2),
        (0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1),
        (0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0),
        (0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
        (0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 2, 0, 1, 0),
        (0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 2, 0, 2),
        (0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
        (0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0),
        (0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0),
        (0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1),
        (0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0),
        (0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 2, 0, 1),
        (0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0),
        (0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0),
        (0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1),
        (0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0),
        (0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0),
        (0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1),
        (0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0),
        (1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1),
        (1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 2, 0, 1, 0),
        (1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 2, 0, 2),
        (1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1),
        (1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0),
        (1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1),
        (1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 2, 0, 1, 0),
        (1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 2, 0, 2),
        (1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1),
        (1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 2, 0, 2, 0),
        (1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0),
        (1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 2, 0, 1),
        (1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0)
        ], [(1, 1, 1, 1, 1, 1)]],
    'probs': [
        [44.6, 13.4, 41.5, 41.5, 17.0, 41.5, 41.5, 17.0, 27.3, 27.3],
        [15.3,  3.6,  0  ,  0  ,  0  ,  0  ,  0  , 100 ,  0  , 27.3],
        [15.3,  0  , 100 ,  0  ,  0  ,  0  ,  0  ,  0  , 62.2, 27.3],
        [15.3, 50.6,  0  ,  0  ,  0  ,  0  ,  0  ,  0  , 95.6, 44.6],
        [44.6, 49.4,  0  ,  0  ,  0  ,  0  , 100 ,  0  , 100 , 44.6],
        [44.6, 100 ,  0  ,  0  ,  0  , 100 ,  0  , 27.1, 37.7, 44.6],
        [44.6, 15.3,  9.4, 25.9, 64.7,  9.4, 31.8, 31.8, 44.6, 44.6]
        ]
    })

class TestInitialisation(ut.TestCase):
    def test_find_numbers(self):
        for board in boards:
            test_numbers = find_numbers(board['board'])
            actual_numbers = board['numbers']
            self.assertEqual(len(actual_numbers), len(test_numbers))
            for i in range(len(test_numbers)):
                for key in ['num', 'val', 'coord', 'nbrs']:
                    self.assertEqual(test_numbers[i][key], actual_numbers[i][key])
    def test_find_groups(self):
        for board in boards:
            test_groups = find_groups(board['numbers'])
            actual_groups = board['groups']
            self.assertEqual(len(actual_groups), len(test_groups))
            for i in range(len(test_groups)):
                for key in ['coords', 'nrs']:
                    self.assertEqual(test_groups[i][key], actual_groups[i][key])

class TestDeducer(ut.TestCase):
    def test(self):
        for board in boards:
            b = SolverReducedBoard(board['board'], per_cell=board['per_cell'])
            b.extract_reduced_lists()
            # b.print_numbers()
            # b.print_groups()
            # b.print_groups(b.fixed_groups)

class TestProbabilityCalculator(ut.TestCase):
    def test(self):
        for board in boards:
            p = ProbsGrid(board['board'], per_cell=board['per_cell'], mines=board['mines'])
            # for cfgs in p.split_configs:
            #     print(*cfgs, sep='\n')
            self.assertEqual(p.split_configs, board['configs'])
            print(p)







if __name__ == '__main__':
    ut.main()
